package conveniencia2;

import java.util.Scanner;
import java.util.List;

public class Administrador extends Usuario {
    private ProdutoRepository produtoRepository;
    
    public Administrador(int id, String nome, String usuario, String senha) {
        super(id, nome, usuario, senha);
    }
    
    public void setProdutoRepository(ProdutoRepository produtoRepository) {
        this.produtoRepository = produtoRepository;
    }
    
    @Override
    public void mostrarMenu() {
        System.out.println("\n=== MENU ADMINISTRADOR ===");
        System.out.println("1. Cadastrar produto");
        System.out.println("2. Listar produtos");
        System.out.println("3. Editar produto");
        System.out.println("4. Remover produto");
        System.out.println("5. Sair");
        System.out.print("Escolha uma opção: ");
    }
    
    @Override
    public boolean temPermissaoAdmin() {
        return true;
    }
    
    public void cadastrarProduto(Scanner scanner) {
        scanner.nextLine(); // Limpar buffer
        System.out.println("\n=== CADASTRO DE PRODUTO ===");
        System.out.print("Nome do produto: ");
        String nome = scanner.nextLine().trim();
        
        if (nome.isEmpty()) {
            System.out.println("Nome do produto não pode estar vazio!");
            return;
        }
        
        System.out.print("Preço: R$ ");
        double preco = scanner.nextDouble();
        
        if (preco < 0) {
            System.out.println("Preço não pode ser negativo!");
            return;
        }
        
        System.out.print("Estoque inicial: ");
        int estoque = scanner.nextInt();
        
        if (estoque < 0) {
            System.out.println("Estoque não pode ser negativo!");
            return;
        }
        
        produtoRepository.cadastrarProduto(new Produto(0, nome, preco, estoque));
        System.out.println("Produto cadastrado com sucesso!");
    }
    
    public void listarProdutos() {
        List<Produto> produtos = produtoRepository.listarProdutos();
        
        if (produtos.isEmpty()) {
            System.out.println("Nenhum produto cadastrado!");
            return;
        }
        
        System.out.println("\n=== PRODUTOS CADASTRADOS ===");
        System.out.println("ID | Nome | Preço | Estoque | Status");
        System.out.println("---|------|-------|---------|-------");
        
        for (Produto p : produtos) {
            String status = p.getEstoque() > 0 ? "OK" : "SEM ESTOQUE";
            System.out.printf("%2d | %-20s | R$ %6.2f | %7d | %s%n", 
                p.getId(), p.getNome(), p.getPreco(), p.getEstoque(), status);
        }
    }
    
    public void editarProduto(Scanner scanner) {
        listarProdutos();
        
        if (produtoRepository.listarProdutos().isEmpty()) {
            return;
        }
        
        System.out.print("\nDigite o ID do produto a ser editado: ");
        int id = scanner.nextInt();
        
        Produto produto = produtoRepository.buscarPorId(id);
        if (produto == null) {
            System.out.println("Produto não encontrado!");
            return;
        }
        
        scanner.nextLine(); // Limpar buffer
        System.out.printf("Produto atual: %s - R$ %.2f (Estoque: %d)%n", 
            produto.getNome(), produto.getPreco(), produto.getEstoque());
        
        System.out.print("Novo nome (Enter para manter atual): ");
        String nome = scanner.nextLine().trim();
        if (nome.isEmpty()) {
            nome = produto.getNome();
        }
        
        System.out.print("Novo preço (0 para manter atual): R$ ");
        double preco = scanner.nextDouble();
        if (preco == 0) {
            preco = produto.getPreco();
        }
        
        System.out.print("Novo estoque (-1 para manter atual): ");
        int estoque = scanner.nextInt();
        if (estoque == -1) {
            estoque = produto.getEstoque();
        }
        
        if (produtoRepository.editarProduto(id, nome, preco, estoque)) {
            System.out.println("Produto editado com sucesso!");
        } else {
            System.out.println("Erro ao editar produto!");
        }
    }
    
    public void removerProduto(Scanner scanner) {
        listarProdutos();
        
        if (produtoRepository.listarProdutos().isEmpty()) {
            return;
        }
        
        System.out.print("\nDigite o ID do produto a ser removido: ");
        int id = scanner.nextInt();
        
        Produto produto = produtoRepository.buscarPorId(id);
        if (produto == null) {
            System.out.println("Produto não encontrado!");
            return;
        }
        
        System.out.printf("Tem certeza que deseja remover o produto '%s'? (S/n): ", produto.getNome());
        scanner.nextLine(); // Limpar buffer
        String confirmacao = scanner.nextLine().trim().toLowerCase();
        
        if (confirmacao.equals("s") || confirmacao.equals("sim") || confirmacao.isEmpty()) {
            produtoRepository.removerProduto(id);
            System.out.println("Produto removido com sucesso!");
        } else {
            System.out.println("Operação cancelada!");
        }
    }
}
